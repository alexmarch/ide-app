// Generated by CoffeeScript 1.7.1
(function () {
	var activation_email, check_email, config, crypto, db, email, has_secure_password, unique_email;
	db = require('../config/db');
	has_secure_password = require('../user_crypto').has_secure_password;
	unique_email = require('../user_crypto').unique_email;
	unique_userid = require('../user_crypto').unique_userid;
	check_email = require('../user_crypto').check_email;
	activation_email = require('../user_crypto').activation_email;
	config = require('../config/global');
	email = require('../noamay.src/libs/email');
	crypto = require('crypto');
	var cookie = require('cookie');
	exports.user = {
		create: function (req, res) {
			if (check_email(req.body.email, req.body.email_confirm)) {
				return unique_email(req.body.email).then(function (unique) {
					if (unique) {
						return unique_userid(req.body.name).then(function (unique) {
							if (unique) {
								return has_secure_password(req.body.password, null).then(function (pwd) {
									return db.q("INSERT INTO users(userid,email,password,salt,active) VALUES(?,?,?,?,false)", [req.body.name, req.body.email, pwd.hash_key, pwd.salt_key]).then(function (user) {
										var active_hash, url;
										active_hash = crypto.randomBytes(128).toString('base64').replace(/\//g, '');
										url = 'http://' + config.host + '/active/email/' + active_hash;
										return db.q("INSERT INTO active_email (user_id,hash,date) VALUES(?,?,DATE_ADD(NOW(),INTERVAL 1 DAY))", [user.insertId, active_hash]).then(function (active) {
											email.successfuly_auth("noreply@noamay.com", req.body.email, url);
											return res.render("signin", {
												info: "Activation code successfully send to your email address !"
											});
										});
									});
								});
							} else {
								return res.render("signup", {
									errors: "This username already taken !"
								});
							}
						});
					} else {
						return res.render("signup", {
							errors: "This email address already taken !"
						});
					}
				});
			} else {
				return res.render("signup", {
					errors: "Error email address !"
				});
			}
		},
		active_email: function (req, res) {
			if (req.params && req.params.hash) {
				activation_email(req.params.hash).then(function (userid) {
					req.session.uid = userid;
					console.log("Regenerete session:", req.session.uid);
					try {
						req.session.sid = cookie.parse(req.headers.cookie)['connect.sid'];
					} catch (e) {
						console.log("Parse session connect session error", e);
					}
					res.redirect("/");
				}, function (err) {
					req.session.errors = "Activation code error !";
					res.redirect('/');
				});
			} else {
				res.render("signin", {
					errors: "Active code errors!"
				});
			}
		}
	};

}).call(this);

//# sourceMappingURL=user.map
